name: CI

on: 
  push:
    branches: 
      - main
    tags: 
      - 'cef_binary*'
      
env:
  DEFAULT_VERSION: "cef_binary_114.2.11+g87c8807+chromium-114.0.5735.134"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.14

    - name: Define version (Linux)
      if: runner.os == 'Linux'
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{env.DEFAULT_VERSION}}
        fi
        VERSION="${VERSION}_linux64_minimal"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version: $VERSION"

    # do not use minimal edition or doxygen will fail.
    - name: Define version (Windows)
      if: runner.os == 'Windows'
      run: |
        if ($env:GITHUB_REF -match "refs/tags/") {
          $VERSION = $env:GITHUB_REF -replace "refs/tags/",""
        } else {
          $VERSION = ${env:DEFAULT_VERSION}
        }
        $VERSION = "${VERSION}_windows64"
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV
        echo "version: $VERSION"

    - name: Download source code and Extract bzip2 file
      run: |
        curl -L -o source.tar.bz2 https://cef-builds.spotifycdn.com/${{env.VERSION}}.tar.bz2
        echo "https://cef-builds.spotifycdn.com/${{env.VERSION}}.tar.bz2 downloaded"

    - name: Extract bzip2 file (Linux)
      if: runner.os == 'Linux'
      run: |
        tar -xjvf source.tar.bz2
        mv ${{env.VERSION}} ./source

    # use `tar` on Windows will stuck, not sure why
    # use `7z` instead
    - name: Extract bzip2 file (Windows)
      if: runner.os == 'Windows'
      run: |
        7z x source.tar.bz2
        7z x source.tar
        mv ${{env.VERSION}} ./source

    - name: Generate cmake release config
      run: |
        cd source
        cmake -DCMAKE_BUILD_TYPE=Release .

    - name: CMake build
      run: |
        cd source
        ls
        cmake --build . --config Release

    - name: Prepare dist folder
      run: |
        mkdir dist
        cp -r source/Release/* dist/
        cp -r source/Resources/* dist/
        cp -r source/libcef_dll_wrapper/**/*.pdb dist/
        cp -r source/libcef_dll_wrapper/**/*.dll dist/
        cp -r source/libcef_dll_wrapper/**/*.lib dist/
        cp -r source/libcef_dll_wrapper/**/*.a dist/

    - name: Create dist archive (Linux)
      if: runner.os == 'Linux'
      run: |
        tar -zcvf linux64.tar.gz dist

    - name: Create dist archive (Windows)
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path dist -DestinationPath windows64.zip
        
    - name: Upload artifact (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: linux64
        path: linux64.tar.gz
        
    - name: Upload artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: windows64
        path: windows64.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Delete old nightly release
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release delete nightly -y
        fi

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref == 'refs/heads/main' && 'nightly' || env.VERSION }}
        name: Release ${{ github.ref == 'refs/heads/main' && 'nightly' || env.VERSION }}
        draft: false
        prerelease: false
        files: artifacts/**/*

